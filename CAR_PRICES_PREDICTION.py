# -*- coding: utf-8 -*-
"""1. Car Prices Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pKeTeQ0-ALBivDD3UO0Q2H7GwtWZrjgO
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn import metrics

data = pd.read_csv('car data.csv')

data.head()

print("Shape of dataset:", data.shape)

#Checking the data type of each column
data.info()

#Checking for the null values
print(data.isnull().sum())

#Counting the values of the categorical data
print(data.Fuel_Type.value_counts())
print(data.Seller_Type.value_counts())
print(data.Transmission.value_counts())

#Encoding the categorical data

data['Fuel_Type'].replace(['Petrol', 'Diesel', 'CNG'],
                        [0, 1, 2], inplace=True)
data['Seller_Type'].replace(['Dealer', 'Individual'],
                        [0, 1], inplace=True)
data['Transmission'].replace(['Manual', 'Automatic'],
                        [0, 1], inplace=True)
data.head()

#training variable
X = data.drop(['Car_Name', 'Selling_Price'], axis = 1)
Y = data['Selling_Price']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 3)

#Fiitinf the training data into linear regression model
model = LinearRegression()
model.fit(X_train, Y_train)

prediction = model.predict(X_train)
R_value = metrics.r2_score(Y_train, prediction)
print("R-squared value:", R_value)

plt.scatter(Y_train, prediction, color='Green')
plt.xlabel("Actual Seliing Price")
plt.ylabel("Predicted Selling Price")
plt.title("ACtual Price vs Predicted Price")
plt.plot()

predicted_model = LinearRegression()
predicted_model.fit(X_test, Y_test)

test_prediction = predicted_model.predict(X_test)
R2_value = metrics.r2_score(Y_test, test_prediction)
print("R squared value:", R2_value)

plt.scatter(Y_test, test_prediction, color='Orange')
plt.xlabel("Actual Selling Price")
plt.ylabel("Predicted Selling Price")
plt.title("Actual vs Predicted Prices")
plt.plot()